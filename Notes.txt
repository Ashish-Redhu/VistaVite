Here we are building a travel booking website (VistaVite).

Remember always start building from the backend part first.

// PART-1:

So, here I have "app.js" (our main backend server file). 
"models" folder (a directory to contain all the models/collection/schemas). Because we will be creating lot of schemas so it is a good thing to put them in a seperate folder and require them in any of the file whereever needed and then create a single or multiple objects/documents and then insert in db or perform any other operation.
"public" folder (a directory to contain static files). Means the files whose content will not change with user interaction.
"views" folder (a directory to contain views/ejs files). These are the ejs/express files whose code will render when we go to diff-diff links/routes.
EJS: Embedded JavaScript, we are writing JS inside HTML, extension of file .ejs
"init" folder (a directory to that contains some data to initialize our database means so that we can insert some data in our database on the starting basis).


// listing.js: This is a file which will make schema and then assign that schema to a collection. Listing of all hotels.
Here no need to make a connection with database, because here we are simply making a new Schema(structure for a particular collection) and assigning that schema to a particular collection and then exporting that collection/model. Here we are not inserting anything in database or any other CRUD operation. We will importing this model/collection inside some other JS file where we have already build connection with mongoDB with the help of mongoose and there we will perform CRUD operations. We are importing mongoose so that we can define a schema. You know mongoose have two work (i) making connection of backend.js file with mongodb and (ii) defining schema.

// We are inserting multiple data in our database with the help of "init" folder, data resides in "data.js" and inserted using "index.js"

// Views >> listings 
index.ejs a view to contain a list of all the villa/apartments/hotels. When we click on any of them it will show us more details about that redirect to other page. 

listing.price.toLocaleString('en-IN'); To add commans to the numbers on the basis of country.


// Till Now: We have simple inserted some data in database using "init" folder, render that data using "view/listings" index.ejs and then a particular data in detail using "show.ejs"
Now:

Add new Listing button ---
We are going to add a button on "index.js" where all the listings are available, to add a new listing.
Procedure:
Click on New listing button >> Get request send and A form render >> click submit button of form >> Post request send, data added to listing collection of wanderlust, page redirected to index.ejs

Update a Listing button with each listing itself ---
Procedure:
A button added with each listing/hotel >> click on edit button, a get request sent >> a form open containing already existing details >> submit form, update/put request sent >> update the things and redirect. 
method-override is require to make put request.

Delete a Listing button with each listing itself ---
Procedure:


app.ejs: Main backend javascript file.

views/listings:
index.ejs: To show all listings
show.ejs: To show a particular listing in detail
new.ejs: Form to create a new listing




// PART-2:
Till Now: We have build a simple website using Mongodb, express, ejs. Where we can list some listings/hotels, after clicking on any of them we get detailed info about that hotel, there we have two buttons "delete" and "Edit". From there we will go to diff page of Edit. On index.ejs where we have all listing we have a button to create a new listing, so one more ejs.

Now: We have design all of them.

EJS Mate: 
npm i ejs-mate >> const ejsMate = require("ejs-mate");
EJS Mate: Helps to create templates. 
// See, it is not a good thing to write lot of things in a single file. It is preferred to create seperate files for small-small things as well. So, that we can easily reuse, debug, update the things easily in future.

Create a file inside a folder views(folder) >> layouts(folder) >> boilderplate.ejs

// boilerplate means common. the code/thing shared by many others. So, this boilerplate.ejs file's code/template will be shared by many of the other files.

We will write basic HTML template inside this boilerplate.ejs and will remove HTML from index.ejs and show.ejs and keep the body same. 

inside boilerplate.ejs:
<%- body %> // means the body tag of other file in which we want to use this boilerplate code will come at this position.

inside index.ejs: 
<% layout("../layouts/boilerplate") %> // keep it a the top of file(that is importing boilerplate.ejs). It says it will use that boilerplate.ejs file's code.


What we are doing here? We are sharing this same boilderplate.ejs code with more than one ejs templates.


Task: 
Create a navbar and a footer that will remain same in most of the templates.

include(folder) >> footer.ejs, navbar.ejs (files). Navbar created with the help of bootstrap and applied static CSS on both. 

Task: 
Styling Index.ejs, new.ejs, show.ejs, edit.ejs;
Index.ejs: Used bootstrap cards.
new.ejs, edit.ejs: same form styling.
show.ejs also styled.

/* To make footer stick on bottom */
body{
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}
.container-fluid{
    flex:1;
}


NOTE: IMP:
See row and column is an amazing thing to adjust things using Bootstrap.
Row means we are creating a single row, if number of items increase and you want to create multiple rows, you have to mention that, no of columns you want to keep you have to mention that simple.



// Phase-1(Part-3) -- Validations: 
Client-side (Form validation): 
i) Only one logic applied that is "required". We make some fields required. But use Bootstrap classes to make the experience of user same on all browsers. Also used these thing with form tag: class="needs-validation" novalidate.
novalidate: It will stop the default form validation of browser and we will use Bootstrap's layout validation.
ii) script.js inside public folder: this contains the logic of bootstrap form validation. 

* Updates made in new.ejs, show.ejs, boilerplate for bootstrap migration.



iii) utils folder: contain all the other utilityy files and folders

iv) wrapAsync inside utils folder: this is used at the place of try-catch to improve the way of writing code for error-handling.

v) ExpressError: This is for custom errors.

vi) Although we have already added "required" field in new/update fields but still we have added one more layer of error-handling. That is, it may happen that someone send some empty request using hopscotch/postman etc.
using (!req.params.x) => then send a custom error.

viii) Used app.all(*) to handle all other url requests. Along with app.use() at the end to handle all other types of errors.

ix) Used a seperate file/view "error.ejs" to show a better interface to the user in case of some error occur.


Now validation is done, means user can't send empty form/object using website or even using some APIs like hopscotch/postman, but one problem is still there and i.e what if someone send few details proper and few details of form/object empty using some API like hopscotch/Postman. 

way-1) either we will apply the check for each entry of form to check either it is non-empty or not to store it into database and update on website then. But not an efficient manner.

way-2) use "joi" a liabrary of npm which is used for data-validation(means to check either the data send by user to server meets some specific requirements or not). Better way.
--------------- npm install joi -----------

Here we define a schema of joi, remember it is not our MongoDB schema, it is simply a struture which would be matched with the struture of data send by user. And definitely, this struture will look bit similar to MongoDB schema, because at the end we are storing the things in DB must be same as send by user. But we are not directly exploiting Database for security reasons.


-------- schema.js ---------
this is a file which contains a schema of joi for data-validation.
** Read that file properly **




// Phase-2 (Part-a): 
New Model: Reviews (comment, rating, createdAt). For now we are not using creatingAt that much. Also, now we are not storing, by whom the review has been created. Lateron we will use them.

// Listing : Review --  (one to many) : We want to make a connection b/w "listing" and "review". Because each listing/hotel will have some reviews. So, we will make an array inside listing model which will store the object ids of reviews.

Created a new model "Review"
Created a form at the end of each listing in "show.ejs"
Implemented the basic functionality of "reviews" in "app.js"

Validation for Reviews: 
i) Client side: It will handle the wrong inputs made using our website/client.
ii) Server side using Joi: It will handle the wrong inputs made using some third party service or APIs like Hoppscotch/Postman etc. 
Same as we done for listing.

Rendering Reviews: 
On the show.ejs. 
Populate listing in app.js where we are passing listing inside show.ejs. populate on the basis of reviews. Because we want to expant that reviews object ids. 

Deleting a Review.
Delete it from review's model. Also, delete it from the Listing's review array.

Deleting a Listing.
Delete the reviews from review model which are associated with this listing/hotel. How we can do that ? Simply we have the object/listing we have deleted from it's array of reviews we can take out the object-ids of reviews and then delete those reviews from review-model.





// ---------- Phase-2 (Part-b) -------------
Express Router: 
Simply a feature of express to reduce the bulkiness of our main backend file app.js. It helps to write the code for seperate models in seperate files and then require them in main backend file.

Procedure: 
Created a folder routes and two files "listing.js" and "review.js" inside it. These are the backend files for these two modules. 
Restructuring listing module. 
Restructuring review module.

Imp: 
Don't forget to adjust the paths properly for the files we are requiring.
const router = express.Router({mergeParams: true}); See, whenever we are defining a specific common path for the routes, then it may happen that the route may contain some parent variable like "id" which would be diff for diff-diff users, so it should not be treated as a common/fixed path for all. So, it is used for defining the seperate parent path for diff-diff users. 


