Here we are building a travel booking website (VistaVite).

Remember always start building from the backend part first.

// PART-1:

So, here I have "app.js" (our main backend server file). 
"models" folder (a directory to contain all the models/collection/schemas). Because we will be creating lot of schemas so it is a good thing to put them in a seperate folder and require them in any of the file whereever needed and then create a single or multiple objects/documents and then insert in db or perform any other operation.
"public" folder (a directory to contain static files). Means the files whose content will not change with user interaction.
"views" folder (a directory to contain views/ejs files). These are the ejs/express files whose code will render when we go to diff-diff links/routes.
EJS: Embedded JavaScript, we are writing JS inside HTML, extension of file .ejs
"init" folder (a directory to that contains some data to initialize our database means so that we can insert some data in our database on the starting basis).


// listing.js: This is a file which will make schema and then assign that schema to a collection. Listing of all hotels.
Here no need to make a connection with database, because here we are simply making a new Schema(structure for a particular collection) and assigning that schema to a particular collection and then exporting that collection/model. Here we are not inserting anything in database or any other CRUD operation. We will importing this model/collection inside some other JS file where we have already build connection with mongoDB with the help of mongoose and there we will perform CRUD operations. We are importing mongoose so that we can define a schema. You know mongoose have two work (i) making connection of backend.js file with mongodb and (ii) defining schema.

// We are inserting multiple data in our database with the help of "init" folder, data resides in "data.js" and inserted using "index.js"

// Views >> listings 
index.ejs a view to contain a list of all the villa/apartments/hotels. When we click on any of them it will show us more details about that redirect to other page. 

listing.price.toLocaleString('en-IN'); To add commans to the numbers on the basis of country.


// Till Now: We have simple inserted some data in database using "init" folder, render that data using "view/listings" index.ejs and then a particular data in detail using "show.ejs"
Now:

Add new Listing button ---
We are going to add a button on "index.js" where all the listings are available, to add a new listing.
Procedure:
Click on New listing button >> Get request send and A form render >> click submit button of form >> Post request send, data added to listing collection of wanderlust, page redirected to index.ejs

Update a Listing button with each listing itself ---
Procedure:
A button added with each listing/hotel >> click on edit button, a get request sent >> a form open containing already existing details >> submit form, update/put request sent >> update the things and redirect. 
method-override is require to make put request.

Delete a Listing button with each listing itself ---
Procedure:


app.ejs: Main backend javascript file.

views/listings:
index.ejs: To show all listings
show.ejs: To show a particular listing in detail
new.ejs: Form to create a new listing




// PART-2:
Till Now: We have build a simple website using Mongodb, express, ejs. Where we can list some listings/hotels, after clicking on any of them we get detailed info about that hotel, there we have two buttons "delete" and "Edit". From there we will go to diff page of Edit. On index.ejs where we have all listing we have a button to create a new listing, so one more ejs.

Now: We have design all of them.

EJS Mate: 
npm i ejs-mate >> const ejsMate = require("ejs-mate");
EJS Mate: Helps to create templates. 
// See, it is not a good thing to write lot of things in a single file. It is preferred to create seperate files for small-small things as well. So, that we can easily reuse, debug, update the things easily in future.

Create a file inside a folder views(folder) >> layouts(folder) >> boilderplate.ejs

// boilerplate means common. the code/thing shared by many others. So, this boilerplate.ejs file's code/template will be shared by many of the other files.

We will write basic HTML template inside this boilerplate.ejs and will remove HTML from index.ejs and show.ejs and keep the body same. 

inside boilerplate.ejs:
<%- body %> // means the body tag of other file in which we want to use this boilerplate code will come at this position.

inside index.ejs: 
<% layout("../layouts/boilerplate") %> // keep it a the top of file(that is importing boilerplate.ejs). It says it will use that boilerplate.ejs file's code.


What we are doing here? We are sharing this same boilderplate.ejs code with more than one ejs templates.


Task: 
Create a navbar and a footer that will remain same in most of the templates.

include(folder) >> footer.ejs, navbar.ejs (files). Navbar created with the help of bootstrap and applied static CSS on both. 

Task: 
Styling Index.ejs, new.ejs, show.ejs, edit.ejs;
Index.ejs: Used bootstrap cards.
new.ejs, edit.ejs: same form styling.
show.ejs also styled.

/* To make footer stick on bottom */
body{
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}
.container-fluid{
    flex:1;
}


NOTE: IMP:
See row and column is an amazing thing to adjust things using Bootstrap.
Row means we are creating a single row, if number of items increase and you want to create multiple rows, you have to mention that, no of columns you want to keep you have to mention that simple.



// Phase-1(Part-3) -- Validations: 
Client-side (Form validation): 
i) Only one logic applied that is "required". We make some fields required. But use Bootstrap classes to make the experience of user same on all browsers. Also used these thing with form tag: class="needs-validation" novalidate.
novalidate: It will stop the default form validation of browser and we will use Bootstrap's layout validation.
ii) script.js inside public folder: this contains the logic of bootstrap form validation. 

* Updates made in new.ejs, show.ejs, boilerplate for bootstrap migration.



iii) utils folder: contain all the other utilityy files and folders

iv) wrapAsync inside utils folder: this is used at the place of try-catch to improve the way of writing code for error-handling.

v) ExpressError: This is for custom errors.

vi) Although we have already added "required" field in new/update fields but still we have added one more layer of error-handling. That is, it may happen that someone send some empty request using hopscotch/postman etc.
using (!req.params.x) => then send a custom error.

viii) Used app.all(*) to handle all other url requests. Along with app.use() at the end to handle all other types of errors.

ix) Used a seperate file/view "error.ejs" to show a better interface to the user in case of some error occur.


Now validation is done, means user can't send empty form/object using website or even using some APIs like hopscotch/postman, but one problem is still there and i.e what if someone send few details proper and few details of form/object empty using some API like hopscotch/Postman. 

way-1) either we will apply the check for each entry of form to check either it is non-empty or not to store it into database and update on website then. But not an efficient manner.

way-2) use "joi" a liabrary of npm which is used for data-validation(means to check either the data send by user to server meets some specific requirements or not). Better way.
--------------- npm install joi -----------

Here we define a schema of joi, remember it is not our MongoDB schema, it is simply a struture which would be matched with the struture of data send by user. And definitely, this struture will look bit similar to MongoDB schema, because at the end we are storing the things in DB must be same as send by user. But we are not directly exploiting Database for security reasons.


-------- schema.js ---------
this is a file which contains a schema of joi for data-validation.
** Read that file properly **




// Phase-2 (Part-a): 
New Model: Reviews (comment, rating, createdAt). For now we are not using creatingAt that much. Also, now we are not storing, by whom the review has been created. Lateron we will use them.

// Listing : Review --  (one to many) : We want to make a connection b/w "listing" and "review". Because each listing/hotel will have some reviews. So, we will make an array inside listing model which will store the object ids of reviews.

Created a new model "Review"
Created a form at the end of each listing in "show.ejs"
Implemented the basic functionality of "reviews" in "app.js"

Validation for Reviews: 
i) Client side: It will handle the wrong inputs made using our website/client.
ii) Server side using Joi: It will handle the wrong inputs made using some third party service or APIs like Hoppscotch/Postman etc. 
Same as we done for listing.

Rendering Reviews: 
On the show.ejs. 
Populate listing in app.js where we are passing listing inside show.ejs. populate on the basis of reviews. Because we want to expant that reviews object ids. 

Deleting a Review.
Delete it from review's model. Also, delete it from the Listing's review array.

Deleting a Listing.
Delete the reviews from review model which are associated with this listing/hotel. How we can do that ? Simply we have the object/listing we have deleted from it's array of reviews we can take out the object-ids of reviews and then delete those reviews from review-model.





// ---------- Phase-2 (Part-b) -------------
Express Router: 
Simply a feature of express to reduce the bulkiness of our main backend file app.js. It helps to write the code for seperate models in seperate files and then require them in main backend file.

Procedure: 
Created a folder routes and two files "listing.js" and "review.js" inside it. These are the backend files for these two modules. 
Restructuring listing module. 
Restructuring review module.

// Require those two files
const listing = require("./routes/listing.js");
const review = require("./routes/review.js");

// Then use them 
app.use("/listings", listing);
app.use("/listings/:id/reviews", review);

*Here we used the comman path that the files will follow.

Imp: 
Don't forget to adjust the paths properly for the files we are requiring.
const router = express.Router({mergeParams: true}); See, whenever we are defining a specific common path for the routes, then it may happen that the route may contain some parent variable like "id" which would be diff for diff-diff users, so it should not be treated as a common/fixed path for all. So, it is used for defining the seperate parent path for diff-diff users. /parent/:id/user if this path is used as fix path then we can't work because for for few  user/review there would be a specific listing/hotel and for some other reviews/user there would be some diff parent/listing/hotel, so that of "parent/listing" must be diff, and can't be directly used as string "id", it's value would be used which is a variable. 



// ----------- Phase-2 (Part-C) -----------------
Session, cookie, connect flash
npm i express-session connect-flash

Here what we want ? 
We simply want if somone adds a new listing, a message a shown. 
When someone edits/delete a listing a new message is popup. 
When someone wants to acces a listing that doesn't exist, an error message pop up. All these things can be done with the help of connect-flash. 

// Code:::
* This is inside listing.js route file. 
const newListing = new Listing(req.body.x);
await newListing.save();

//i) Here we have simply created the flash. How and where to show is defined somewhere else.
req.flash("success", "New Listing Created!");
res.redirect("/listings");

* We will show all the pop-up messages on top of screen so, we will show them in "layout >> flash.ejs" and include that in "boilderplate.ejs". 

//ii) This is inside app.js file. Here we stored the message of that flash inside a local variable inside inside middleware so that it can be accessible by all the pages. 
app.use((req, res, next)=>{
    res.locals.successMsg = req.flash("success");
    next();
})


//iii) Shown the all types of messages inside "flash.ejs" which is included inside "boilerplate.ejs". 



*** When we will show pop-up error message ? ***
eg.> When someone try to access or edit the listing which doesn't exist with the help of link.




// ------------- Phase-2 (Pard-D) ---------------------------
1.)
Authentication: 
It is the process of verifying who someone is. SignUp, Login
Authorization: 
It is the process of giving some specific powers to the specific users like which user has the power/access to modify files, view some specific files. 

2.) Passwords are not directly stored, they are stored after converting into a hashcode, generated by a "Hashfunction" from that password. A HashFunction is a one way function to generate hashcodes. 
Hash-Functions are one way functions. One can convert password to hashcode but not the hashcode to password. eg.> We have an "abs" absolute function Math.abs(-5) = 5, Math.abs(5) = 5. This is a one way function because even if we have the output "5", we can't tell what was the output 5 or -5. "%" modulous operator is also a one way operator like we have n%m=3, then we can't find n or m.
- A Hashfunction generate all the hashcodes of same length, but very diff even when the password provided by user are similar.

3.) Salting:
A technique of adding a string of 32 or more characters in the actual passwords and then hashing them. This is done because in any case hacker got access to database, means now he/she have user-ids and hashcodes. Now he/she can easily match these hashcodes with the hashcodes of commonly used passwords,present in reverse look up tables. But if salting is done, which is done by each company very secretly. It is very-very difficult to get the password from the hashcode, the hashcode which is generated from userpass + salt.

Now we don't have to do all these Hashing and Salting by ourself. Node.js libraries and various tools are there which can perform authetication task for ourself.

** Passport **
Passport is an npm library which is express compatable authentication middleware for Node.js. 

npm i passport
npm i passport-local // It is a strategy to autheticate user on the basis of "username and password" provided.
npm i passport-local-mongoose // It is a plugin with mongoDb that helps in login 
"pbkdf2" hashing algorithm is used by "passport" for hasing. 


********************
User Model:

await User.register(fakeUser, "fakePassword"); // inside "app.js"
// Here, User is the model name "fakeUser" is the objectname or say new user we have defined now and then the password associated with this particular object. We are following this procedure at the place of "fakeUser.save()" because we are using "passport" and passport work with authentication which requires password. 

userRoute.js:
1.) SignUp User procedure:
i) app.get("/signup") - we will render the form to enter details. "users >> signup.ejs"
ii) app.post("/signup") - as he/she submits the form we receive the post-request on this route and save the details in database after authentication. 

2.) LogIn User procedure:
i) app.get("/login") - we will show a form to enter username and password.
ii) app.post("/login") - as he/she submits the form, we will receive the post-request and authenticate that the user exist or not and then login else we will show an error message and redirect to the login page again. 

Code: 
router.post("/login", passport.authenticate("local", {failureRedirect:"/login", failureFlash: true}),wrapAsync(async(req, res)=>{
     req.flash("success", "Welcome back to Vista-Vite !"); // passport will fetch the details in form automatically.
    res.redirect("/listings");
}));
// Remember one thing, the authentication for login by "passport" is done only by passing it as a middleware function. 2-arguments. First is "local" because we are doing authentication locally in our computer. Second is an object where 2-key value pairs, first tells where to redirect if login failed means user not already exist, second is either we want to show an error flash message or not. 




//                        --------------- Phase-2 (Part-e) ------------------

Authentication: 
1.) Now we want to the user to create/edit/delete listings only if he/she is login. 
req.isAuthenticated(); // This is a method of "passport" which checks either the user is present in database as well it is the current user who is logged in. 

//i) Create a new listing. inside "listing.js" route. 
router.get("/new", (req, res)=>{
    if(!req.isAuthenticated())
    {
        req.flash("error", "You must be loggedin to create a new listing");
        return res.redirect("/login");
    }
    res.render("new.ejs");
})
Do the same thing with edit and delete route. 
Lateron we will add more functionalities like the person should be the owner of this property to delete/edit etc. 

Note: After logout or restart of app.js, the session will end and a new session will start, that is why we have to login again. 

Imp Note: Middleware: Whenever we want to share the same logic between multiple files we should put it in some middleware, rather than pasting it everwhere. So, we would write this concept of "isLoggedIn" in a "middleware.js" file and then require it in some variable and then use that as a middleware before edit/create/delete.


ii) LogOut: This is an inbuilt method of "passport" which will delete the data of user from current session and log it out.  req.logOut(callbackFunction.);

- Adding buttons for SignUp, Login, Logout along in "includes >> navbar.ejs". 
iii)  Directly login after SignUp.
  req.login(currUser, callbackFunction); Both the callbacks of logOut and login are similar.


iv) post-login/signup page:
After login/Signup we don't the user to go /listings page. But we want the user to go to the same page for which he/she has requested before login/signup. We want to do this for his convenience.

middlewares >> saveRedirectUrl (this is also used as a middleware, ki bhai jahan pe bhi user ne request mari h, pehle uss path ko store karwa lo) >> fir dusra middleware, authentication wala run karo >> fir koi aur kam karo. 



Authorization: 
i) We want to associate a particular owner with each listing/property and only that owner of that property can "edit/delete" that property. Also that owner must be the user. 
ii) We want to associate a particular author with each review and only that author can delete that review. Also that author must be the user of our platform. 

i) Authorization for listing: 
// Remember one thing, whereever you find one file is getting heavy, then create small modules, means create a folder and create seperate files for each task in that file. That folder will contain files which will perform similar kind of tasks. Like middlewares for "listings, reviews, users" etc. 

Steps: 
a) Change the schema of listing inside "models >> listing.js" and update the data using "init" folder and map method. Here, we associated an Owner/User to a property/listing. 
b) Store owner with each newly created listing as well inside "listingRoute >> "/new" post route"
c) While edit/delete use a middleware "isOwner" to check either the person loggedIn and trying to update/delete is the owner of listing or not. 

// req.user: Store the data of currently loggedIn user. 


ii) Authorization for reviews:
a) Change the schema of review inside "models >> review.js". Delete those earlier created reviews which don't have this field. Add the author field with each review when it is newly created inside "reviewRoute.js"
b) Also, show the name of author of each review with it rather than a random name in "show.ejs". For this we have to nested populate each listing on the basis of "reviews", "author". 
const listing = await Listing.findById(id).populate({path: "reviews", populate: {path: "author"}}).populate("owner");

c) User must be loggedIn to add a review. Show this review-form only when the user is logged in. Also, show the Edit and Delete button only if the user is loggedIn as well as he is the owner of that listing. View "show.ejs".

d) To delete a review, user must be loggedIn. Also, only the author of review can delete it.




//                           -------------------- Phase-3 (Part-a) ---------------------------
Till now we have done our basic concepts like models, database, routes, errorHandling, validation, authentication, Authorization.

1.)
MVC: Model, View, Controller
Models: These are the structure/schema of a particular type of objects/documents we are going to store in database. Related to DB.
Views: These are basically the EJS pages we want to show on going to diff-diff routes. Related to Frontend.
Controllers: These are the actual backend functions we have to perform on going to diff-diff routes. Related to Backend.

Till now what we have done is, we have simply combined both views and controllers with the routes, means on going to this route perform this opreation or on going to this route show this page. But we want to seperate this thing. Now we will write these functionalities of performing some task (controllers/functions) in seperate files. 
We actually try to segrigate the things as much as possible.


So, how the things will be from now ?
i) We will create models in models folder ii) We will write our main backend file app.js iii) We will write all the views in views folder iv) We will create a routes-folder to seperate the paths for each model v) We will create a seperate folder "controllers" which will store the functions to perform on diff-diff routes. Because routes job is to simply route the things on diff-diff paths not to execute the functions as well. 

visit: controllers >> .... and routes >> ... to get Implemented info.


2.)
Router.route: This is a way to write our routes in a more compact way. See, it may happen diff-diff types of requests like (get, delete, post) are coming on the same route to perform their respected tasks. So, we can combine these requests as their paths are same and they will look more compact.
visit: routes >> ... to get Implemented info.


3.) Re-Styling rating
// i) Will use starability rating library present on github
// ii) Copy one of the CSS from there and put it in a new file public >> CSS >> rating.css  
// iii) Include this CSS inside boilerplate.
// iv) Copy one of the HTML code from readme and paste it on the views/listings/show.ejs. As our rating is present on show.ejs and we want to show the stars there. 
// v)
<!-- To show the stars statically in the added comments. -->
<p class="starability-result card-text" data-rating="<%=review.rating%>"></p>    
// vi) 
Change the class and name for each input in that HTML code we copied and pasted in show.ejs to take input from user.

// Future: i) we can take the average all the ratings and show it on index.ejs page as well. 




 *** 4.) Image upload feature: ***
See till now we can't upload the pictures, we can only provide the link of image. But we will face two issues if we try to upload pictures i) our form is not capable of taking pictures ii) Our mongoDb database is not capable of storing files/images.
What we have to do?
i) Will make our form capable to take files/images as input.
ii) We will use a third-party free services where our images will be uploaded/saved. And then that 3rd-party service will provide us a link, and we will store that link in our MongoDb database. 


i) Making form capable to take files/images as input. 
enctype="multipart/form-data" this will be added as arguments in the new/edit form. This will make our form capable to take input as files/images. Also change the input type of image from text-to-file. 

Now change the route of (/new, post) in listingRoute, this is to get to know what will happen when we upload a new image. And empty object will show on screen, remember it is not storing in database now as we have changed the code in listingRoute.js for a new listing. Because we have not used parser that is multer to understand form data.

* MULTER * : npm third party library to parse form data. 
npm i multer
const multer = require('multer');    // inside listingRoute.js. Multer will help to parse the form data. 
const upload = multer({dest: 'uploads/'}); // inside listingRoute.js. upload will store these files in a uploads folder.Also, add a middleware upload.single('x[image]') and res.send(req.file);
See, listingRoute and new.ejs for more details. 

parsing: It is a process to change the form of data so that it becomes easy to understand and perform various operations on it.



ii) Uploading data on cloud server for free : Cloudinary.
Make an account on this platform and you will have to find various types of credentials like API keys, secret key etc.

NOTE: We will use credentials in our code but Never save any type of credential on gitHub or when you are using the things on production level. For now we are in development phase. Production phase means the code whose output is going to be visible to the users. 


.env file: The file to store environment variables(the variables/things used in our code, but these things are secret and we don't want to share them with anyone). This file work on key=value pairs remember nothing else will be used but only the key=value pairs will be stored, no space, no-commas, nothing, just KEY=value then next line then KEY=value.

* dotenv * : npm third party library, to access environment variables from env file.
npm i dotenv

// Initially the below 3-things will be stored in .env file. 
Cloudname
CloudApiKey
cloudApiSecret


* Two npm libraries to work with cloudinary and multer means to parse form data which contains images/files and store them to cloudinary. 
* npm install cloudinary@1.41.0 * 
* npm i multer-storage-cloudinary * 

cloudConfig.js // This file will contain the configurations, means the code to make a connection b/w our backend files and cloudinary database. 

Import the storage and cloudinary in listingRoute.js and adjust the path as "storage" as multer will update the things there in the storage of cloudinary.

Till now what we have done, now our form is able to take files/images as input. That data can be parsed with the help of multer and saved in cloudinary cloud storage. 


** Now **
Modify image in schema.
updating listingRoute.js and controllers >> listing.js. Also update the defualt init data and index.js and show.ejs so that they can access the files properly.


---- Future: -------
functionalities to add in future: 
i - Multiple images for same listing.
ii - Add a cap on image size. 
And many more...


Update Edit page:
Same as we done with new.ejs and all the functinalities in the controllers >> listing.js.
Showing the previously added image on the edit page but remember in low quality because we don't want to render the high quality pictures again and again. Cloudinary provide this feature as well. 
What we will do? 
Inside controllers >> listing.js, We will simply create a new variable which will store the updated value of image url and pass it as an argument to the edit form. and use this updated url in edit.ejs form.






//                           -------------------- Phase-3 (Part-b) ---------------------------

1.) Implement Maps Feature in our Website:
 ** We will use "MapBox" free maps api **

a) 
i) Copy the default public token and use it in our .env file. See this token is not that much secure, also it is public but still we will use it in .env file because we don't want to share any kind of private data with public.

ii) cdn links of css and js files added in boilerplate code
iii) add a div with an id "map" in show.ejs. 
iv) public >> js >> map.js : put your javascript code here in this file, the same code written in the documentation for "mapbox-gl-js". Write CSS for map in public >> style.css
v) Remember one thigs these environment variables are accessible in "ejs" files but not accessible in public files. So, we will access the mapToken in the JS code written in public folder for map. We can create a script in show.ejs and create a variable which will store that accessToken and that variable will be accessible in public files/folders as well. Also include this file in show.ejs because at the end we want to show the map on show.ejs: <script src="/js/map.js"></script>

b) 
Geocoding: It is the process of converting text-based addresses into geographic-coordinates and vice-versa.
Forward Geocoding converts text to geolocation. And, backward do vice-versa.

Go to Github >> mapbox sdk and then download using the below code in current directory:
npm install @mapbox/mapbox-sdk


Then, get the below code :
    let response = await geocodingClient.forwardGeocode({
        query: req.body.x.location,
        limit: 1
      })
        .send();
console.log(response.body.features[0].geometry);
// -- Here limit show the number of geo-coordinates because there could be multiple coordinates for the same input like for India/NewDelhi there could be many coordinates. -- query value will be the input of location from, form of "new.ejs". 

Q: We want whenever we try to create a new listing we print the coordinates of location entered. 
-- Go to controllers >> listings.js. 
const mbxGeocoding = require("@mapbox/mapbox-sdk/services/geocoding");
const mapToken = process.env.MAP_TOKEN;
const geocodingClient = mbxGeocoding({accessToken: mapToken});
The upper things are available in documentation on github sdk of mapbox. 
-- update create listing. 

Q: Now we want whenever use enter a location while creating a listing, we store the coordinates of that location in the collection of listing. 
-- use Mongoose geoJson: This is a format in mongoose to store geographic coordinates. We will use this. 
Go on website of mongoose geoJSON and copy the below code and use in the models >> listing.js. Means we are actually updating the strucute of our documents. 
geometry: {
    type: {
      type: String, // Don't do `{ location: { type: String } }`
      enum: ['Point'], // 'location.type' must be 'Point'
      required: true
    },
    coordinates: {
      type: [Number],
      required: true
    }
  }

-- Go to controllers >> listing.js 
newListing.geometry = response.body.features[0].geometry; 

c) Using Mapbox Marker
This will help us to add a marker to the location where our hotel/property/listing actually present. 
-- https://docs.mapbox.com/mapbox-gl-js/example/add-a-marker/  : go to this link and use the below code. 
const marker1 = new mapboxgl.Marker()
        .setLngLat([12.554729, 55.70651])    // We will get the values of these longitue and latitude from the database documents of listing >> geometry. There we store coordinates. 
        .addTo(map);   // Then we are adding this to the map. 

Use the above code in public >> js >> map.js as our JS logic to show map is there. But remember one thing we can't directly access the database or any other things in public files. So, as we are requiring this public >> map.js file in views >> listings >> show.ejs. So, what we will do ? We will create a variable in show.ejs that variable will store the value of coordinates from DB and use this variable. 

const coordinates = <%- JSON.stringify(listing.geometry.coordinates) %>; // This is show.ejs;


Q: Whenever someone hover/click on the location marker, he/she gets the location of the property/listing.
-- Use MapBox popups. 
.setPopup(new mapboxgl.Popup().setHTML("<h1>Hello World!</h1>")) // Use this code in the map.js before addTo(map); 








//                           -------------------- Phase-3 (Part-c) ---------------------------
Design imporovement. 


//                           -------------------- Phase-3 (Part-d) ---------------------------
1.)
MongoDB Atlas:
Shifting our Database from our local machine to cloud. Simply go to MongoDb Atlas website and follow the steps. 
-- Remember while creating a new cluster (simply the place on cloud/internet where your data will be stored), you will get a username and password, write it somewhere because lateron, we will use it. 
-- mongodb+srv://ashishredhu5810:<password>@cluster0.00eer.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
You have to replace the <password> in the above string with your password that you saved. 
-- Store the upper updated string in environment variable. Go to "app.js" here we will use this environment variable of MongoDb Atlas to connect to Database rather than the local MongoDB database url. 
-- Run app.js

* Note: As we have shifted our MongoDB url from local to cloud, so it will be empty, user=0, reviews=0, listings=0;


2.) 
Mongo Session Storage: 
Till now the session information was stored in our local machine's storage. But now we will use MongoDB Atlas to store the session info. And, as we all know local storage is good during development and debuggin, not for deployement.  
-- npm i connect-mongo
// in app.js
const session = require('express-session');
const MongoStore = require('connect-mongo');

const store = MongoStore.create({
  mongoUrl: dbUrl, // this is url of cloud storage where database is present. 
  crypto: {
    secret: "mysupersecretcode"
  },
  touchAfter: 10*60, // This is is seconds. Means if nothing has been updated in database then don't logout or don't do anything with the page, even when the user refresh or close the page. Usually we set it to 24hrs = 24*60*60. But here I provided only 10mins = 10*60 in seconds. 
});
store.on("error", ()=>{
  console.log("Error in MONGO SESSION STORE", err);
})
pass this store into "sessionOptions" ;

* Note: After this we can notice one new collection named "sessions" in MongoDB Atlas. 

// Remember to add this thing in package.json inside the first object. 
"engines": {
  "node": "version of node you have"
}







//                           -------------------- Change-1: ---------------------------
i) "/" root path adjusted. Now "/" means "/listings"
ii) navbar adjusted. all listings removed. 
iii) footer updated. remove fb, insta, twitter and added github, linkedin, leetcode links with icons. 
icons used are of font-awesome.
iv) Adjust show page. 





//                          ---------------------- Change-2: -------------------------
i) Adding responsiveness in showpage, newListing Form page.. 
Making show page fro small screens. 

ii) Adding a dropdown 

iii) I want to create two different profiles: a) Normal user b) listing owner. 
a) Functionalities of normal user: listings=0. Booking functionality will add later. Show listings after clicking on your profile. 
b) Functionalities of listing owner: listing=0/n. Booking functinality=null. Show listings after clicking on your profile. 
iii) Type/Role of user added in "model" and "signup" form. 

iii) Now I want to perform something like, whenever someone click on "Your Profile", all the details of user shows on a page. All of his/her listings. And, many more.
a) Update the database of "user" where we will add the object-id of listings of that particular user. 
b) Whenever a listing got deleted, it must be deleted from it's Owner's collection, also from 


** Facilities feature added **







